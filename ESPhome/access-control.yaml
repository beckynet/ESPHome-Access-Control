substitutions:
  device_name: "accesscontrol"
  friendly_name: "Access Control"
  update_interval: 60s

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}

esp8266:
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "Y O U R   K E Y   H E R E"
  services:
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'

# Enable OTA Update
ota:
  - platform: esphome

# Enable Web Server
web_server:
  port: 80
  auth:
    username: !secret web_login
    password: !secret web_password

# Enable Wifi
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Access-Control-Hotspot"
    password: "P@ssword1!"

captive_portal:

binary_sensor:
  - platform: status
    name: Status

sensor:
  # Reports the WiFi signal strength/RSSI in dB
  - platform: wifi_signal 
    name: WiFi Signal
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  # Reports the WiFi signal strength in %
  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    device_class: ""

  # Uptime sensor.
  - platform: uptime
    name: Uptime
    id: uptime_seconds
    internal: true

text_sensor:
  # Expose ESPHome version as sensor.
  - platform: version
    name: ESPHome Version
    hide_timestamp: true

  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: Wifi IP
    ssid:
      name: Wifi SSID
    bssid:
      name: Wifi BSSID

  # Expose Uptime.
  - platform: template
    name: "Uptime"
    icon: mdi:clock-start
    update_interval: ${update_interval}
    entity_category: "diagnostic"
    lambda: |-
      int seconds = (id(uptime_seconds).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      if ( days ) {
        return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( hours ) {
        return { (String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( minutes ) {
        return { (String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else {
        return { (String(seconds) +"s").c_str() };
      }

  # Expose Keypad Code.
  - platform: template
    name: "Keypad Code"
    id: keyCode
    icon: mdi:dialpad


switch:
  # Switch To Play Sound.
  - platform: template
    id: play_sound
    name: "Play Sound"
    icon: "mdi:volume-high"      
    turn_on_action:
      - rtttl.play: 'siren:d=8,o=5,b=100:d,e,d,e,d,e,d,e'
    turn_off_action:
      - rtttl.stop:

button:
  # Button to Restart.
  - platform: restart
    name: "Restart"

  # Button to Factory Reset.
  - platform: factory_reset
    name: "Reset To Factory"   

  # Button to Open Door Switch Keypad Light from Red to Green.
  - platform: output
    name: "Open Door"
    output: output1
    duration: 500ms
    icon: "mdi:led-on"
    on_press:
      - logger.log: "Wiegand LED"
      - text_sensor.template.publish:
          id: keyCode
          state: ""

wiegand:
  - id: leitor
    d1: GPIO5
    d0: GPIO4
    on_key:
      - lambda: ESP_LOGI("KEY", "received key %d", x);
    on_tag:
      - lambda: ESP_LOGI("TAG", "received tag %s", x.c_str());
      - homeassistant.tag_scanned: !lambda 'return x.c_str();'
      - logger.log:
          format: "Tag %s scanned"
          args: ["x.c_str()"]
    on_raw:
      - lambda: ESP_LOGI("RAW", "received raw %d bits, value %llx", bits, value);

key_collector:
  - id: pincode_reader
    source_id: leitor
    min_length: 4
    max_length: 4
    end_keys: "#"
    end_key_required: true
    back_keys: "*"
    clear_keys: "C"
    allowed_keys: "0123456789"
    timeout: 5s
    on_progress:
      - logger.log:
          format: "input progress: '%s', started by '%c'"
          args: [ 'x.c_str()', "(start == 0 ? '~' : start)" ]
    on_result:      
      then:
        - text_sensor.template.publish:
            id: keyCode
            state: !lambda "return x.c_str();"
        - logger.log: 
            format: "input result: '%s', started by '%c', ended by '%c'"
            args: [ 'x.c_str()', "(start == 0 ? '~' : start)", "(end == 0 ? '~' : end)" ]
    on_timeout:
      - logger.log:
          format: "input timeout: '%s', started by '%c'"
          args: [ 'x.c_str()', "(start == 0 ? '~' : start)" ]

output:
    # Pin for Speaker Out
  - platform: esp8266_pwm
    pin: GPIO13
    id: rtttl_out

    # Pin to Open Door
  - platform: gpio
    pin: GPIO12
    id: output1
    inverted: True

rtttl:
  output: rtttl_out
  on_finished_playback:
    - logger.log: 'Song ended!'
    - switch.turn_off: play_sound
  gain: 80%

light:
  - platform: neopixelbus
    type: GRB
    variant: WS2811
    pin: GPIO2
    num_leds: 1
    name: "Light"
    restore_mode: ALWAYS_OFF
    effects:
      - pulse:
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 0%
          max_brightness: 100%
      - pulse:
          name: "Slow Pulse"
          # transition_length: 1s      # defaults to 1s
          update_interval: 2s
      - pulse:
          name: "Asymmetrical Pulse"
          transition_length:
            on_length: 1s
            off_length: 500ms
          update_interval: 1.5s
      - strobe:
      - strobe:
          name: "Red Blue Strobe"
          colors:
            - state: true
              brightness: 100%
              red: 100%
              green: 0%
              blue: 0%
              duration: 100ms
            - state: false
              duration: 100ms
            - state: true
              brightness: 100%
              red: 100%
              green: 0%
              blue: 0%
              duration: 100ms
            - state: true
              brightness: 100%
              red: 0%
              green: 0%
              blue: 100%
              duration: 100ms
            - state: false
              duration: 100ms
            - state: true
              brightness: 100%
              red: 0%
              green: 0%
              blue: 100%
              duration: 100ms
